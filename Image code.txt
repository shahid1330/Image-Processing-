% 1. reading an image
i = imread('cameraman.tif');
figure,imshow(i)

% 2. reading a coloured image
i = imread('peppers.png');
figure,imshow(i)

% 3. displaying the rgb image
i = imread("peppers.png");
red = i(:,:,1);
green = i(:,:,2);
blue = i(:,:,3);

figure,imshow(red);
figure,imshow(green);
figure,imshow(blue);

% 4 . displaying rgb with original
i = imread('peppers.png');
red = i(: , : , 1 );
green = i(: , : , 2 );
blue = i(: , : , 3 );

subplot (2,2,1), imshow(i);
subplot (2,2,2), imshow(red);
subplot (2,2,3), imshow(green);
subplot (2,2,4), imshow(blue);

% 5. printing a pattern
r=zeros(4,4);
r(1,1,3)=5;
r(2,2,2)=15;
r(3,3,1)=19;
r(4,4,3)=255;
figure, imshow(r)

% 6. Sampling of image till 4x4

a = imread('tire.tif');
figure, imshow(a);

[m, n] = size(a);

b = a(2:2:m, 2:2:n);
b = imresize(b, [102, 116], 'method', 'nearest');
b = uint8(b);
figure, imshow(b);

c = b(2:2:m/2, 2:2:n/2);
c = imresize(c, [51, 58], 'method', 'nearest');
c = uint8(c);
figure, imshow(c);

d = c(2:2:m/4, 2:2:n/4);
d = imresize(d, [25, 29], 'method', 'nearest');
d = uint8(d);
figure, imshow(d);

e = d(2:2:m/8, 2:2:n/8);
e = imresize(e, [12, 14], 'method', 'nearest');
e = uint8(e);
figure, imshow(e);

f = e(2:2:m/16, 2:2:n/16);
f = imresize(f, [6, 7], 'method', 'nearest');
f = uint8(f);
figure, imshow(f);

g = f(2:2:m/32, 2:2:n/32);
g = imresize(g, [3, 3], 'method', 'nearest');
g = uint8(g);
figure, imshow(g);

h = g(2:2:m/64, 2:2:n/64);
h = imresize(h, [1, 1], 'method', 'nearest');
h = uint8(h);
figure, imshow(h);

% 7. Sampling of Image

I = imread('cameraman.tif');
[m, n] = size(I);

A = zeros(m/2, n/2);
for i = 1:m/2
    for j = 1:n/2
        A(i, j) = I(2*i, 2*j);
    end
end

B = zeros(m/4, n/4);
for i = 1:m/4
    for j = 1:n/4
        B(i, j) = A(2*i, 2*j);
    end
end

C = zeros(m/8, n/8);
for i = 1:m/8
    for j = 1:n/8
        C(i, j) = B(2*i, 2*j);
    end
end

D = zeros(m/16, n/16);
for i = 1:m/16
    for j = 1:n/16
        D(i, j) = B(2*i, 2*j);
    end
end

imshow(B, []);

% 8. log based transformation
img=imread('cameraman.tif');
[m,n]=size(img);
c=29;
for i= 1 : m
    for j= 1: n
        img(i,j)=c*log(255+double( img(i,j) ) );
    end
end
imshow(img);

% 9. Negative of an image

img=imread('cameraman.tif');
[m,n]=size(img);
negative=zeros(m,n);
for i= 1 : m
    for j= 1: n
        img(i,j)=255-img(i,j);
    end
end
imshow(img);

% 10. Quantization of an image
I = imread('cameraman.tif');

[m, n] = size(I);

A = zeros(m, n);
B = zeros(m, n);
C = zeros(m, n);
D = zeros(m, n);
E = zeros(m, n);
F = zeros(m, n);
G = zeros(m, n);
H = zeros(m, n);

for i = 1:m
    for j = 1:n
        A(i, j) = 2 * (I(i, j) / 2);
        B(i, j) = 4 * (I(i, j) / 4);
        C(i, j) = 8 * (I(i, j) / 8);
        D(i, j) = 16 * (I(i, j) / 16);
        E(i, j) = 32 * (I(i, j) / 32);
        F(i, j) = 64 * (I(i, j) / 64);
        G(i, j) = 128 * (I(i, j) / 128);
        H(i, j) = 256 * (I(i, j) / 256);
    end
end


figure, subplot(2, 3, 1), imshow(A, []);
subplot(2, 2, 2), imshow(B, []), title('128 gray levels');
subplot(2, 2, 3), imshow(C, []), title('64 gray levels');
subplot(2, 2, 4), imshow(D, []), title('32 gray levels');


figure, subplot(2, 3, 1), imshow(E, []), title('16 gray levels');
subplot(2, 2, 2), imshow(F, []), title('8 gray levels');
subplot(2, 2, 3), imshow(G, []), title('4 gray levels');
subplot(2, 2, 4), imshow(H, []), title('2 gray levels');

% 11. Gama based 2 points transformation
img=imread('cameraman.tif');
[m,n]=size(img);
c=2;
g=1;
for i= 1 : m
    for j= 1: n
        img(i,j)= c * (double(img(i,j))^g);
    end
end
imshow(img);

% 12. Intensity level slicing

img=imread('moon.tif');
[m,n]=size(img);
for i = 1 : m
    for j = 1 : n
        if (img(i,j)<110)
            img(i,j)=255;
        end

    end

end
imshow(img);

%% 13. HISTOGRAM EQUILIZATION %%

img=imread('pout.tif');
figure
subplot(1,3,1);
imshow(img);
subplot(1,3,2:3);
imhist(img);

% Histogram 
img=histeq(img,256);
figure
subplot(1,3,1);
imshow(img);
subplot(1,3,2:3);
imhist(img);

% 14. Intensity slicing 

I=imread('pout.tif');
[m,n]=size(I);

J=zeros(m,n);
K=zeros(m,n);
for i=1:m
    for j=1:n
        if(I(i,j)>=150 && I(i,j)<200)
            J(i,j)=255;
        else 
            J(i,j)=I(i,j);
        end
    end
end

for i=1:m
    for j=1:n
        if(I(i,j)>=150 && I(i,j)<200)
            K(i,j)=255;
        else 
            K(i,j)=25;
        end
    end
end
figure, subplot(2,2,1),imshow(I);
title('original')
subplot(2,2,2),imshow(J,[]);
title('Intensity Slicing, no change')
subplot(2,1,2),imshow(K,[]);
title('Intensity Slicing with subtling')

% 15. average filtering of image

originalImage = imread('tire.tif');
filterSize = [6, 6];
averageFilter = fspecial('average', filterSize);
filteredImage = imfilter(originalImage, averageFilter);
subplot(1, 2, 1);
imshow(originalImage);
title('Original Image');

subplot(1, 2, 2);
imshow(filteredImage);
title('Filtered Image (3x3 Average Filter)');
imwrite(filteredImage, 'filtered_image.jpg');
median filter 
im noise function

% 16. Median Filtering

originalImage = imread('cameraman.tif');
filterSize = [3, 3];
medianFiltered = medfilt2(originalImage, filterSize);
subplot(1, 2, 1);
imshow(originalImage);
title('Original Image');
subplot(1, 2, 2);
imshow(medianFiltered);
title('Median-Filtered Image');
imwrite(medianFiltered, 'median_filtered_image.jpg');

% 17. Sharpening of an image

img = imsharpen(img,'Radius',200,'Amount',2);
figure,imshow(img);

% 18. Noise in an image
originalImage = imread('tire.tif');
noiseType = 'gaussian';
noiseLevel = 0.2;
noisyImage = imnoise(originalImage, noiseType, noiseLevel);
subplot(1, 2, 1);
imshow(originalImage);
title('Original Image');
subplot(1, 2, 2);
imshow(noisyImage);
title('Noisy Image');
imwrite(noisyImage, 'noisy_image.jpg');